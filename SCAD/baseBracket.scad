HEIGHT = 110;
BASE_WIDTH = 100;
TOP_WIDTH = 36;
STEM_WIDTH = 26;
CANT_ANGLE = 10;

BASE_HOLE_DIAMETER = 7;
BASE_HOLE_COUNTERSINK = 18;
BASE_HOLE_COUNTERSINK_THICK = 5;
BASE_HOLE_DISTANCE = 75;

SIDE_HOLE_DIAMETER = 7;
SIDE_COUNTERSINK_DIAMETER = 18;
SIDE_COUNTERSINK_THICK = 5;
SIDE_HOLE_DISTANCE = 25.4*3;
SIDE_HOLE_LOWER_HEIGHT = 25.4*.5+10;

FR_HOLE_DIAMETER = 7;
FR_COUNTERSINK_DIAMETER = 18;
FR_COUNTERSINK_THICK = 5;
FR_HOLE_DISTANCE = 25.4*3;
FR_HOLE_LOWER_HEIGHT = 25.4*.5+10;

CANT_OFFSET = tan(CANT_ANGLE)*HEIGHT;

HOLE_LENGTH = STEM_WIDTH/sin(90-CANT_ANGLE) - STEM_WIDTH;

$fn = 200;

bracket_points =
[
	[0,0,0],[0,BASE_WIDTH,0],[BASE_WIDTH,0,0],[BASE_WIDTH,BASE_WIDTH,0], 	//Base
	[BASE_WIDTH/2-TOP_WIDTH/2+CANT_OFFSET-HOLE_LENGTH,BASE_WIDTH/2-TOP_WIDTH/2,HEIGHT],							//Top
	[BASE_WIDTH/2-TOP_WIDTH/2+CANT_OFFSET-HOLE_LENGTH,BASE_WIDTH/2-TOP_WIDTH/2+TOP_WIDTH,HEIGHT],				//Top
	[BASE_WIDTH/2-TOP_WIDTH/2+TOP_WIDTH+CANT_OFFSET,BASE_WIDTH/2-TOP_WIDTH/2,HEIGHT],				//Top
	[BASE_WIDTH/2-TOP_WIDTH/2+TOP_WIDTH+CANT_OFFSET,BASE_WIDTH/2-TOP_WIDTH/2+TOP_WIDTH,HEIGHT]		//Top
	
];
cut_points = 
[
	[BASE_WIDTH/2-STEM_WIDTH/2-HOLE_LENGTH,BASE_WIDTH/2-STEM_WIDTH/2,0],				//Base
	[BASE_WIDTH/2-STEM_WIDTH/2-HOLE_LENGTH,BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH,0],		//Base
	[BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH,BASE_WIDTH/2-STEM_WIDTH/2,0],		//Base
	[BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH,BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH,0],	//Base
	
	[BASE_WIDTH/2-STEM_WIDTH/2+CANT_OFFSET-HOLE_LENGTH,BASE_WIDTH/2-STEM_WIDTH/2,HEIGHT],				//Top
	[BASE_WIDTH/2-STEM_WIDTH/2+CANT_OFFSET-HOLE_LENGTH,BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH,HEIGHT],		//Top
	[BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH+CANT_OFFSET,BASE_WIDTH/2-STEM_WIDTH/2,HEIGHT],		//Top
	[BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH+CANT_OFFSET,BASE_WIDTH/2-STEM_WIDTH/2+STEM_WIDTH,HEIGHT]	//Top
];
faces = 
[
	[2,3,1,0],[1,5,4,0],[0,4,6,2],[4,5,7,6],[1,3,7,5],[3,2,6,7]
];

difference()
{
	//Main bracket
	polyhedron(bracket_points,faces); 
	
	//Stem hole
	polyhedron(cut_points,faces); 
	
	//Base bolt holes
	translate([BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,0])	cylinder(HEIGHT,BASE_HOLE_DIAMETER/2,BASE_HOLE_DIAMETER/2); 
	translate([BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,0])	cylinder(HEIGHT,BASE_HOLE_DIAMETER/2,BASE_HOLE_DIAMETER/2);
	translate([BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,0])	cylinder(HEIGHT,BASE_HOLE_DIAMETER/2,BASE_HOLE_DIAMETER/2);
	translate([BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,0])	cylinder(HEIGHT,BASE_HOLE_DIAMETER/2,BASE_HOLE_DIAMETER/2);
	
	//Base bolt hole countersinks
	translate([BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,BASE_HOLE_COUNTERSINK_THICK])	cylinder(HEIGHT,BASE_HOLE_COUNTERSINK/2,BASE_HOLE_COUNTERSINK/2); 
	translate([BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,BASE_HOLE_COUNTERSINK_THICK])	cylinder(HEIGHT,BASE_HOLE_COUNTERSINK/2,BASE_HOLE_COUNTERSINK/2);
	translate([BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,BASE_WIDTH/2-BASE_HOLE_DISTANCE/2,BASE_HOLE_COUNTERSINK_THICK])	cylinder(HEIGHT,BASE_HOLE_COUNTERSINK/2,BASE_HOLE_COUNTERSINK/2);
	translate([BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,BASE_WIDTH/2+BASE_HOLE_DISTANCE/2,BASE_HOLE_COUNTERSINK_THICK])	cylinder(HEIGHT,BASE_HOLE_COUNTERSINK/2,BASE_HOLE_COUNTERSINK/2);

	//side holes
	hull()
	{
		translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([0,BASE_WIDTH,SIDE_HOLE_LOWER_HEIGHT])	rotate([90,0,0])	cylinder(BASE_WIDTH,SIDE_HOLE_DIAMETER/2,SIDE_HOLE_DIAMETER/2);
		translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([0,BASE_WIDTH,SIDE_HOLE_LOWER_HEIGHT+SIDE_HOLE_DISTANCE])	rotate([90,0,0])	cylinder(BASE_WIDTH,SIDE_HOLE_DIAMETER/2,SIDE_HOLE_DIAMETER/2);
	}
	difference()
	{
		hull()
		{
			translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([0,BASE_WIDTH,SIDE_HOLE_LOWER_HEIGHT])	rotate([90,0,0])	cylinder(BASE_WIDTH,SIDE_COUNTERSINK_DIAMETER/2,SIDE_COUNTERSINK_DIAMETER/2);
			translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([0,BASE_WIDTH,SIDE_HOLE_LOWER_HEIGHT+SIDE_HOLE_DISTANCE])	rotate([90,0,0])	cylinder(BASE_WIDTH,SIDE_COUNTERSINK_DIAMETER/2,SIDE_COUNTERSINK_DIAMETER/2);
		}
		translate([0,BASE_WIDTH/2-STEM_WIDTH/2-SIDE_COUNTERSINK_THICK,0])	cube([BASE_WIDTH,STEM_WIDTH+(2*SIDE_COUNTERSINK_THICK),HEIGHT]);

	};
	//Front/rear holes
	hull()
	{
		translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([-BASE_WIDTH/2,BASE_WIDTH/2,FR_HOLE_LOWER_HEIGHT])	rotate([0,90,0])	cylinder(BASE_WIDTH,FR_HOLE_DIAMETER/2,FR_HOLE_DIAMETER/2);
		translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([-BASE_WIDTH/2,BASE_WIDTH/2,FR_HOLE_LOWER_HEIGHT+FR_HOLE_DISTANCE])	rotate([0,90,0])	cylinder(BASE_WIDTH,FR_HOLE_DIAMETER/2,FR_HOLE_DIAMETER/2);
	}
	difference()
	{
		hull()
		{
				translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([-BASE_WIDTH/2,BASE_WIDTH/2,FR_HOLE_LOWER_HEIGHT])	rotate([0,90,0])	cylinder(BASE_WIDTH,FR_COUNTERSINK_DIAMETER/2,FR_COUNTERSINK_DIAMETER/2);
				translate([BASE_WIDTH/2,0,0])	rotate([0,CANT_ANGLE,0]) translate([-BASE_WIDTH/2,BASE_WIDTH/2,FR_HOLE_LOWER_HEIGHT+FR_HOLE_DISTANCE])	rotate([0,90,0])	cylinder(BASE_WIDTH,FR_COUNTERSINK_DIAMETER/2,FR_COUNTERSINK_DIAMETER/2);
		}
		
		translate([BASE_WIDTH/2-STEM_WIDTH/2-FR_COUNTERSINK_THICK,0,0])	rotate([0,CANT_ANGLE,0])	cube([STEM_WIDTH+(2*FR_COUNTERSINK_THICK),BASE_WIDTH,HEIGHT]);

	};
}

	